name: release

on:
  push:
    tags:
      - v*

jobs:
  # pypi:
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - run: poetry build
  #     - uses: pypa/gh-action-pypi-publish@release/v1

  # snap-remote-build:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - name: Build wheel
  #       run: |
  #         poetry build
  #         mkdir snap/local
  #         cp -v dist/rclip-*.tar.gz snap/local
  #     - run: sudo snap install snapcraft --classic
  #     - run: snapcraft remote-build --launchpad-accept-public-upload
  #       env:
  #         SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN }}
  #     - run: ls -lah

  # snap:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - name: Build wheel
  #       run: |
  #         poetry build
  #         mkdir snap/local
  #         cp -v dist/rclip-*.tar.gz snap/local
  #     - run: sudo snap install snapcraft --classic
  #     - uses: canonical/setup-lxd@v0.1.1
  #     - run: snapcraft --use-lxd
  #     - run: ls -lah

  # snap:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix:
  #       platform: [amd64, arm64]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - name: Build wheel
  #       run: |
  #         poetry build
  #         mkdir snap/local
  #         cp -v dist/rclip-*.tar.gz snap/local
  #     - uses: docker/setup-qemu-action@v1
  #     - uses: diddlesnaps/snapcraft-multiarch-action@v1.8.0
  #       id: snapcraft
  #       with:
  #         architecture: ${{ matrix.platform }}
  #     - run: ls -lah ${{ steps.snapcraft.outputs.snap }}
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ${{ steps.snapcraft.outputs.snap }}

  snap:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # platform: [amd64, aarch64]
        platform: [aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.platform }}
          distro: ubuntu20.04

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get -y update
            apt-get -y install python3 python3-pip python3-distutils
            pip3 install --upgrade poetry
            snap install snapcraft --classic
            snap install lxd --channel=5.0/stable
            lxd init

          # Produce a binary artifact and place it in the mounted volume
          run: |
            poetry install
            poetry build
            mkdir snap/local
            cp -v dist/rclip-*.tar.gz snap/local
            snapcraft --use-lxd
            cp rclip-*.snap "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - run: ls -al "${PWD}/artifacts"

  # appimage:
  #   runs-on:  ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Parse the Version
  #       id: version
  #       run: |
  #         echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
  #         echo ::set-output name=PRERELEASE::$(
  #           [[ ! $GITHUB_REF =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "true"
  #         )
  #     - name: Set up APPDIR for after_bundle
  #       run: echo "APPDIR=$PWD/AppDir" >> $GITHUB_ENV
  #     - name: Build AppImage
  #       uses: AppImageCrafters/build-appimage@v1.3
  #       with:
  #         recipe: './appimage-builder.yml'
  #       env:
  #         APP_VERSION: ${{ steps.version.outputs.VERSION }}
  #     - name: Generate Changelog
  #       id: changelog
  #       run: |
  #         git fetch --unshallow
  #         PREVIOUS_TAG="$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))"
  #         CHANGELOG="$(git --no-pager log --pretty="format:- %s" $PREVIOUS_TAG..${{ steps.version.outputs.VERSION }})"
  #         CHANGELOG="${CHANGELOG//'%'/'%25'}"
  #         CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
  #         CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
  #         echo "::set-output name=CHANGELOG::$CHANGELOG"
  #     - name: Create Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         name: ${{ steps.version.outputs.VERSION }}
  #         artifacts: 'rclip-*.AppImage'
  #         body: ${{ steps.changelog.outputs.CHANGELOG || 'internal release' }}
  #         prerelease: ${{ steps.version.outputs.PRERELEASE }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
