name: build

on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up Node.js for pyright
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry
          poetry install
          make install-pyright
      - name: Check Style
        run: make lint-style
      - name: Check Types
        run: make lint-types

  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry
          poetry install
      - name: Run Tests
        run: make test

  parse_ref:
    runs-on: ubuntu-22.04
    needs: [lint, test]
    outputs:
      release_requested: ${{ steps.parse.outputs.release_requested }}
      is_prerelease: ${{ steps.parse.outputs.is_prerelease }}
    steps:
      - id: parse
        run: |
          echo "release_requested=$([[ $GITHUB_REF =~ ^refs\\/tags\\/v[0-9]+\\.[0-9]+\\.[0-9]+ ]] && echo \"true\")" >> $GITHUB_ENV
          echo "is_prerelease=$([[ ! $GITHUB_REF =~ ^refs\\/tags\\/v[0-9]+\\.[0-9]+\\.[0-9]+$ ]] && echo \"true\")" >> $GITHUB_ENV

  release_test:
    runs-on: ubuntu-22.04
    needs: parse_ref
    if: ${{ needs.parse_ref.outputs.release_requested == 'true' }}
    steps:
      env:
        release_requested: ${{ needs.parse_ref.outputs.release_requested }}
        IS_PRERELEASE: ${{ needs.parse_ref.outputs.is_prerelease }}
      run: |
        echo "release_requested=$release_requested"
        echo "IS_PRERELEASE=$IS_PRERELEASE"

  # release_test_only_release:
  #   runs-on: ubuntu-22.04
  #   needs: parse_ref
  #   if: ${{ needs.parse_ref.outputs.release_requested == 'true' && needs.parse_ref.outputs.is_prerelease != 'false' }}
  #   steps:
  #     env:
  #       release_requested: ${{ needs.parse_ref.outputs.release_requested }}
  #       IS_PRERELEASE: ${{ needs.parse_ref.outputs.is_prerelease }}
  #     run:
  #       echo "release_requested=$release_requested"
  #       echo "IS_PRERELEASE=$IS_PRERELEASE"

  # release_pypi:
  #   runs-on: ubuntu-22.04
  #   needs: parse_ref
  #   if: ${{ needs.parse_ref.outputs.release_requested == 'true' }}
  #   permissions:
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - run: poetry build
  #     - uses: pypa/gh-action-pypi-publish@release/v1

  # release_brew:
  #   runs-on: ubuntu-22.04
  #   # the Formula references the rclip package published to PyPI
  #   needs: [parse_ref, pypi]
  #   if: ${{ needs.parse_ref.outputs.release_requested == 'true' }}
  #   steps:
  #     - name: Parse the Version
  #       id: version
  #       run: |
  #         echo ::set-output name=PRERELEASE::$(
  #           [[ ! $GITHUB_REF =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "true"
  #         )
  #     - uses: actions/checkout@v3
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #     - uses: actions/setup-python@v4
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - name: Setup git
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #       run: |
  #         git config --global user.email "zhibot.gh@gmail.com"
  #         git config --global user.name "Zhi Bot"
  #     - name: Release
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.ZHIBOT_GITHUB_TOKEN }}
  #       run: make release-brew

  # release_snap:
  #   runs-on: ubuntu-20.04
  #   needs: parse_ref
  #   if: ${{ needs.parse_ref.outputs.release_requested == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Parse the Version
  #       id: version
  #       run: |
  #         echo ::set-output name=PRERELEASE::$(
  #           [[ ! $GITHUB_REF =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "true"
  #         )
  #     - name: Configure git for "snapcraft remote-build"
  #       run: |
  #         git config --global user.email "yurij@mikhalevi.ch"
  #         git config --global user.name "Yurij Mikhalevich"
  #     - name: Setup launchpad creds
  #       run: |
  #         mkdir -p ~/.local/share/snapcraft/provider/launchpad
  #         echo "${{ secrets.LAUNCHPAD_CREDENTIALS }}" > ~/.local/share/snapcraft/provider/launchpad/credentials
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade poetry
  #         poetry install
  #     - name: Build wheel
  #       run: |
  #         poetry build
  #         mkdir snap/local
  #         cp -v dist/rclip-*.tar.gz snap/local
  #     - run: sudo snap install snapcraft --classic
  #     - run: snapcraft remote-build --launchpad-accept-public-upload
  #     - name: Validate built snap
  #       run: |
  #         sudo snap install rclip_*_amd64.snap --dangerous
  #         rclip cat
  #     - name: Upload snaps to the beta channel
  #       run: |
  #         for snap in *.snap; do
  #           snapcraft upload --release=beta "$snap"
  #         done
  #       env:
  #         SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN }}
  #     - name: Promote snaps to the stable channel
  #       if: ${{ steps.version.outputs.PRERELEASE != 'true' }}
  #       run: snapcraft promote --from-channel=beta --to-channel=stable --yes rclip
  #       env:
  #         SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN }}

  # release_appimage:
  #   runs-on:  ubuntu-20.04
  #   needs: parse_ref
  #   if: ${{ needs.parse_ref.outputs.release_requested == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Parse the Version
  #       id: version
  #       run: |
  #         echo ::set-output name=PRERELEASE::$(
  #           [[ ! $GITHUB_REF =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "true"
  #         )
  #     - name: Set up APPDIR for after_bundle
  #       run: echo "APPDIR=$PWD/AppDir" >> $GITHUB_ENV
  #     - name: Build AppImage
  #       uses: AppImageCrafters/build-appimage@v1.3
  #       with:
  #         recipe: './release-utils/appimage/appimage-builder.yml'
  #       env:
  #         APP_VERSION: ${{ GITHUB_REF_NAME }}
  #     - name: Generate Changelog
  #       id: changelog
  #       run: |
  #         git fetch --unshallow
  #         PREVIOUS_TAG="$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))"
  #         CHANGELOG="$(git --no-pager log --pretty="format:- %s" $PREVIOUS_TAG..$GITHUB_REF_NAME)"
  #         CHANGELOG="${CHANGELOG//'%'/'%25'}"
  #         CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
  #         CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
  #         echo "::set-output name=CHANGELOG::$CHANGELOG"
  #     - name: Create Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         name: ${{ GITHUB_REF_NAME }}
  #         artifacts: 'rclip-*.AppImage'
  #         body: ${{ steps.changelog.outputs.CHANGELOG || 'internal release' }}
  #         prerelease: ${{ steps.version.outputs.PRERELEASE }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
